// Code generated by sqlc. DO NOT EDIT.
// source: expenses.sql

package db

import (
	"context"
)

const createExpenses = `-- name: CreateExpenses :one
INSERT INTO expenses (
    account_id,
    value
) VALUES (
    $1, $2
) RETURNING id, account_id, value, created_at
`

type CreateExpensesParams struct {
	AccountID int64 `json:"accountID"`
	Value     int64 `json:"value"`
}

func (q *Queries) CreateExpenses(ctx context.Context, arg CreateExpensesParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, createExpenses, arg.AccountID, arg.Value)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpense = `-- name: DeleteExpense :exec
DELETE FROM expenses
WHERE id = $1
`

func (q *Queries) DeleteExpense(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteExpense, id)
	return err
}

const listExpenses = `-- name: ListExpenses :many
SELECT id, account_id, value, created_at FROM expenses
WHERE account_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListExpensesParams struct {
	AccountID int64 `json:"accountID"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListExpenses(ctx context.Context, arg ListExpensesParams) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, listExpenses, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Value,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpenses = `-- name: UpdateExpenses :one
UPDATE expenses 
SET  value = $2
WHERE id = $1
RETURNING id, account_id, value, created_at
`

type UpdateExpensesParams struct {
	ID    int64 `json:"id"`
	Value int64 `json:"value"`
}

func (q *Queries) UpdateExpenses(ctx context.Context, arg UpdateExpensesParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, updateExpenses, arg.ID, arg.Value)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}
