// Code generated by sqlc. DO NOT EDIT.
// source: person.sql

package db

import (
	"context"
	"database/sql"
)

const createPerson = `-- name: CreatePerson :one
INSERT INTO person (
    name,
    document,
    phone
) VALUES (
    $1, $2, $3
) RETURNING id, name, document, phone, created_at
`

type CreatePersonParams struct {
	Name     string         `json:"name"`
	Document string         `json:"document"`
	Phone    sql.NullString `json:"phone"`
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) (Person, error) {
	row := q.db.QueryRowContext(ctx, createPerson, arg.Name, arg.Document, arg.Phone)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Document,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const deletePerson = `-- name: DeletePerson :exec
DELETE FROM person
WHERE id = $1
`

func (q *Queries) DeletePerson(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePerson, id)
	return err
}

const getPerson = `-- name: GetPerson :one
SELECT id, name, document, phone, created_at FROM person
WHERE ID = $1 LIMIT 1
`

func (q *Queries) GetPerson(ctx context.Context, id int64) (Person, error) {
	row := q.db.QueryRowContext(ctx, getPerson, id)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Document,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const listPerson = `-- name: ListPerson :many
SELECT id, name, document, phone, created_at FROM person
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPersonParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPerson(ctx context.Context, arg ListPersonParams) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, listPerson, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Document,
			&i.Phone,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePerson = `-- name: UpdatePerson :one
UPDATE person 
SET 
    document = $2,
    phone = $3
WHERE 
    name = $1
RETURNING id, name, document, phone, created_at
`

type UpdatePersonParams struct {
	Name     string         `json:"name"`
	Document string         `json:"document"`
	Phone    sql.NullString `json:"phone"`
}

func (q *Queries) UpdatePerson(ctx context.Context, arg UpdatePersonParams) (Person, error) {
	row := q.db.QueryRowContext(ctx, updatePerson, arg.Name, arg.Document, arg.Phone)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Document,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}
